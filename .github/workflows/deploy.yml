name: CI/CD

on:
  push:
    branches:
      - master

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write' # This is required for Google Cloud authentication
      packages: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
      
      # Set a lowercase variable for the repository owner
      - id: string
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ github.repository }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ steps.string.outputs.lowercase }}:latest
        
      - name: 'auth'
        uses: 'google-github-actions/auth@v3'
        with:
          workload_identity_provider: 'projects/734236224404/locations/global/workloadIdentityPools/github-pool/providers/github'
          service_account: 'github-actions-sa@unique-conquest-470906-t2.iam.gserviceaccount.com'

      - name: 'compute-ssh'
        uses: 'google-github-actions/ssh-compute@v2'
        with:
          instance_name: 'instance-20250902-062757'
          zone: 'us-east1-c'
          ssh_private_key: ${{ secrets.VM_SSH_KEY }}
          # Use a multi-line command to first log in to GHCR and then run the Docker image
          command: |
            # Log in to GitHub Container Registry from within the VM
            # GITHUB_TOKEN is a temporary token provided by GitHub Actions
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            
            # Stop and remove any existing container running on port 3000
            if [ "$(docker ps -q -f name=my-app-container)" ]; then
              docker stop my-app-container
              docker rm my-app-container
            fi

            # Pull the latest image
            docker pull ghcr.io/${{ steps.string.outputs.lowercase }}:latest

            # Run the new container, exposing port 8080 on the host and 3000 on the container
            docker run -d --name my-app-container -p 8080:3000 ghcr.io/${{ steps.string.outputs.lowercase }}:latest
